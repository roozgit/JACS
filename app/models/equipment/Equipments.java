package models.equipment;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.validation.ValidationException;

import models.Blobs;
import models.Companies;
import models.Components;
import models.Datasheet;
import models.EventTypes;
import models.History;
import models.PartsComponents;
import models.RepairTools;
import models.Sections;
import models.Subunits;
import models.maintenance.Maintenances;
import models.maintenance.PreventiveMaintenances;
import play.Logger;
import play.data.format.Formats;
import play.data.validation.Constraints;
import play.data.validation.Constraints.Max;
import play.data.validation.Constraints.Min;
import play.db.ebean.Model;

import com.avaje.ebean.Ebean;
import com.avaje.ebean.Page;
@Entity
@Table(name="equipments")
public class Equipments extends Model {

	private static final long serialVersionUID = 2227042999556377128L;

	@Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE)
	public Long id;
	
	@ManyToOne
	public EquipmentClass equipmentClass;
	
	@ManyToOne
	public Sections section;

	@Constraints.Required
	@Formats.NonEmpty
	public String name;
	
	public String description;
	
	public String equipmentAutoGeneratedCode;
	public String assetNo;
	public String equipmentSerialNo;
	public String oredaCode;
	public String costCenter;
	
	//Maker info
	@ManyToOne
	public Companies manufacturerCompany;
	
	public String manufacturerModelDesignation;
	
	@Formats.DateTime(pattern="yyyy/MM")
	public Date manufactureDate;
	
	@Formats.DateTime(pattern="yyyy/MM/dd")
	public Date purchaseDate;
	
	@Column(columnDefinition="TEXT")
	public String guarantee;
	@Formats.DateTime(pattern="yyyy/MM/dd")
	public Date guaranteeEndDate;
	
	//Operational info
	@OneToOne
	public Equipments drivenEquipment;
	
	@OneToOne
	public Equipments driverEquipment;
	
	@Formats.DateTime(pattern="yyyy/MM/dd")
	public Date initialCommissioningDate;
	
	@Formats.DateTime(pattern="yyyy/MM/dd")
	public Date currentServiceStartDate;
	
	@Formats.DateTime(pattern="yyyy/MM/dd")
	public Date currentServiceEndDate;
	
	@Min(0)
	public Float initialUpTime;
	
	@Min(0)
	public Float initialDownTime;
	
	@Enumerated(EnumType.STRING)
	public OperationModes operationMode;
	
	@Enumerated(EnumType.STRING)
	public Criticality criticality;
	
	//for operation plan of equipment
	@Min(0)
	public Float upPeriodHours;
	
	@Min(0)
	public Float offPeriodHours;
	
	@Formats.DateTime(pattern="yyyy/MM/dd")
	public Date operationPlanStartDate;
	
	@Min(0)
	@Max(1)
	public Float redundancyRatio;
	
	@Column(columnDefinition = "TEXT")
	public String maintenaceMethod;
	
	@Column(columnDefinition = "TEXT")
	public String maintenaceSafetyRequirements;
	
	@Column(columnDefinition = "TEXT")
	public String operationMethod;
	
	@Column(columnDefinition = "TEXT")
	public String operationSafetyRequirements;
	
	@ManyToMany
	public List<RepairTools> specialTools = new ArrayList<RepairTools>();

	@ManyToMany
	public List<Blobs> files = new ArrayList<Blobs>();
	
	@Column(columnDefinition="TEXT")
	public String hseRisks;
	
	@Column(columnDefinition="TEXT")
	public String safetyRisks;
	
	@Column(columnDefinition="TEXT")
	public String comments;
	
	@OneToMany(mappedBy="equipment")
	public List<Subunits> subunits = new ArrayList<Subunits>();
	
	//Query creation helper
	public static Model.Finder<Long,Equipments> find =
			new Model.Finder<Long,Equipments>(Long.class,Equipments.class);

	
	
	public static List<Equipments> findEquipmentClassEquipments(Long equipmentClassId) {
	return find.where()
		.eq("equipmentClass.id",  equipmentClassId).findList();
	}

	/**
	 * A list of Equipments for use in html select element in views
	 * @return Map<id,name> of equipments
	 */
	public static Map<String,String> options() {
        	LinkedHashMap<String,String> options = new LinkedHashMap<String,String>();
        	for(Equipments eq: Equipments.find.where()
        			.isNotNull("id")
        			.orderBy("name")
        			.findList()) {
            	options.put(eq.id.toString(), eq.name);
        	}
        	options.put("","");
        	return options;
	}
	
	/**
	 * A list of Equipments for use in html select element in views
	 * @return Map<id,name> of equipments
	 */
	public static Map<String,String> optionsWoPiping() {
        	LinkedHashMap<String,String> options = new LinkedHashMap<String,String>();
        	for(Equipments eq: Equipments.find.all()) {
        		if(!eq.equipmentClass.name.toLowerCase().contains("piping"))
        			options.put(eq.id.toString(), eq.name);
        	}
        	return options;
	}
	
	/**
	 * Overrides options() to return brother equipment of current equipment, e.g if a section
	 * has 10 equipments and this method gets id of equipment 1 it fills the select element with
	 * all of current section's equipments and not all possible equipments
	 * @return Map<id,section name>
	 */
	public static Map<String, String> options(Long equipmentId) {
		LinkedHashMap<String, String> options = new LinkedHashMap<String, String>();
		Sections parentSection = Equipments.find.byId(equipmentId).section;
		for (Equipments e : parentSection.equipments) {
			options.put(e.id.toString(), e.name);
		}
		return options;
	}
	
	/**
	 * Overrides options() to return brother equipment of current equipment, e.g if a section
	 * has 10 equipments and this method gets id of equipment 1 it fills the select element with
	 * all of current section's equipments and not all possible equipments
	 * @return Map<id,section name>
	 */
	public static Map<String, String> optionsWoPiping(Long equipmentId) {
		LinkedHashMap<String, String> options = new LinkedHashMap<String, String>();
		Sections parentSection = Equipments.find.byId(equipmentId).section;
		for (Equipments e : parentSection.equipments) {
			if(!e.equipmentClass.name.toLowerCase().contains("piping"))
				options.put(e.id.toString(), e.name);
		}
		return options;
	}
	
	/**
	 * Returns a page of equipments for display
	 * 
	 * @param page
	 *            Page number
	 * @param pageSize
	 *            Size of each page
	 * @param sortBy
	 *            parameter to sort the equipments by, typically name
	 * @param order
	 *            order of sort
	 * @param filter
	 *            Search filter, for equipments, name and description, and class
	 *            search
	 * @return Page<Sections>: A page of Equipments
	 */
	public static Page<Equipments> page(Long parentSectionId, int page, int pageSize, String sortBy,
			String order, String filter) {
		String whoql =
				"(section.id) = :parentSectionId AND (" +
				"lower(name) like :filter OR " +
				"lower(description) like :filter OR " +
				"lower(equipmentClass.name) like :filter)";
		
		com.avaje.ebean.Query<Equipments> query = Ebean.createQuery(Equipments.class);
		query.where(whoql).
		setParameter("filter","%"+filter+"%").
		setParameter("parentSectionId",parentSectionId);
		
		return query.orderBy(sortBy + " " + order).
				findPagingList(pageSize)
				.setFetchAhead(false).getPage(page);
	}
	
	
	/**
	 * Copies a equipment or component and creates same one with same properties and details
	 * @param parentLevel
	 * @param parentId
	 */
	public static boolean copy(Long equipmentId, Long sectionId) {
		boolean result;
		Ebean.beginTransaction();
		try {
			Equipments copiedEquipment = Equipments.find.byId(equipmentId);
			if(Equipments.find.where().eq("section.id",sectionId).eq("name",copiedEquipment.name).findRowCount()!=0)
				throw new ValidationException("There is a equipment with same name in target section");
			Equipments pastedEquipment = new Equipments();
			pastedEquipment = (Equipments) copiedEquipment._ebean_createCopy();
			pastedEquipment.name=copiedEquipment.name;
			pastedEquipment.section=Sections.find.byId(sectionId);
			pastedEquipment.id=null;
			
			pastedEquipment.save();
			//copy equipment blobs to new equipment
			int fs = copiedEquipment.files.size();
			pastedEquipment.files = new ArrayList<Blobs>();
			if(fs!=0) {
				for(Blobs bb : copiedEquipment.files) {
					pastedEquipment.files.add(bb);
				}
			}
			pastedEquipment.saveManyToManyAssociations("files");
			//copy equipment reparir tools to new equipment
			fs = copiedEquipment.specialTools.size();
			pastedEquipment.specialTools=new ArrayList<RepairTools>();
			if(fs!=0) {
				for(RepairTools rt : copiedEquipment.specialTools) {
					pastedEquipment.specialTools.add(rt);
				}
			}
			pastedEquipment.saveManyToManyAssociations("specialTools");
			//save equipment datasheet
			List<Datasheet> copiedDsList = Datasheet.find.where().
					eq("parentEquipment.id", equipmentId).
					findList();
			if(copiedDsList.size()!=0) {
				for(Datasheet ds : copiedDsList) {
					Datasheet newDs = new Datasheet();
					newDs = (Datasheet) ds._ebean_createCopy();
					newDs.id=null;
					newDs.parentEquipment=pastedEquipment;
					newDs.save();
				}
			}
			//copy equipment pm routines
			List<PreventiveMaintenances> copiedPMList = PreventiveMaintenances.find.where().
					eq("parentEquipment.id", equipmentId).
					findList();
			if(copiedPMList.size()!=0) {
				for(PreventiveMaintenances pm : copiedPMList) {
					PreventiveMaintenances newPM = new PreventiveMaintenances();
					newPM = (PreventiveMaintenances) pm._ebean_createCopy();
					newPM.id=null;
					newPM.parentEquipment=pastedEquipment;
					newPM.save();
				}
			}
			
			//save equipment subunits
			List<Subunits> copiedSubunitList = Subunits.find.where().
					eq("equipment.id", equipmentId).
					findList();
			if(copiedSubunitList.size()!=0) {
				for(Subunits su : copiedSubunitList) {
					Subunits newSU = new Subunits();
					newSU = (Subunits) su._ebean_createCopy();
					newSU.id=null;
					newSU.equipment=pastedEquipment;
					newSU.save();
					
					//save subunit datasheet
					List<Datasheet> copiedSubunitDsList = Datasheet.find.where().
					eq("parentSubunit.id", su.id).
					findList();
					if(copiedSubunitDsList.size()!=0) {
						for(Datasheet ds : copiedSubunitDsList) {
							Datasheet newDs = new Datasheet();
							newDs = (Datasheet) ds._ebean_createCopy();
							newDs.id=null;
							newDs.parentSubunit=newSU;
							newDs.save();
						}
					}
					
					//copy subunit blobs to new subunit
					fs = su.files.size();
					newSU.files = new ArrayList<Blobs>();
					if(fs!=0) {
						for(Blobs bb : su.files) {
							newSU.files.add(bb);
						}
					}
					newSU.saveManyToManyAssociations("files");
					
					List<Components> copiedComponents = Components.find
							.where()
							.eq("subunit.id",su.id)
							.findList();
					if(copiedComponents.size()!=0)
						for(Components com : copiedComponents) {
							Components newCom = new Components();
							newCom = (Components) com._ebean_createCopy();
							newCom.id=null;
							newCom.subunit = newSU;
							newCom.save();
							
							//save component datasheet
							List<Datasheet> copiedComponentDsList = Datasheet.find.where().
							eq("parentComponent.id", com.id).
							findList();
							if(copiedComponentDsList.size()!=0) {
								for(Datasheet ds : copiedComponentDsList) {
									Datasheet newDs = new Datasheet();
									newDs = (Datasheet) ds._ebean_createCopy();
									newDs.id=null;
									newDs.parentComponent=newCom;
									newDs.save();
								}
							}
							//copy component blobs to new component
							fs = com.files.size();
							newCom.files = new ArrayList<Blobs>();
							if(fs!=0) {
								for(Blobs bb : com.files) {
									newCom.files.add(bb);
								}
							}
							newCom.saveManyToManyAssociations("files");
							List<PartsComponents> copiedPCs = PartsComponents.find.where().eq("component.id",com.id).findList();
							if(copiedPCs != null)
								for(PartsComponents pcs : copiedPCs) {
									PartsComponents newPC = new PartsComponents();
									newPC = (PartsComponents) pcs._ebean_createCopy();
									newPC.id=null;
									newPC.component = newCom;
									newPC.save();
								}
						}
				}
				
			}
			
		Ebean.commitTransaction();
		result=true;
		} catch(Exception e) {
			Logger.error("equipment copy error",e.fillInStackTrace());
			Ebean.rollbackTransaction();
			result=false;
		} finally {
			Ebean.endTransaction();
		}
		return result;
	}
	
	
	/**
	 * Copies a equipment or component and creates same one with same properties and details
	 * @param parentLevel
	 * @param parentId
	 */
	public static boolean copyAsComponent(Long equipmentId, Long subunitId) {
		boolean result;
		Ebean.beginTransaction();
		try {
			Equipments copiedEquipment = Equipments.find.byId(equipmentId);
			Components pastedComponent = new Components();
			
			//Throw exception if there are subunits
			List<Subunits> copiedSubunitList = Subunits.find.where().
					eq("equipment.id", equipmentId).
					findList();
			if(copiedSubunitList.size()!=0) {
					throw new ValidationException("Please remove subunits first");
				}
			pastedComponent.subunit=Subunits.find.byId(subunitId);
			pastedComponent.comments= copiedEquipment.comments;
			pastedComponent.componentSerialNo= copiedEquipment.equipmentSerialNo;
			pastedComponent.description= copiedEquipment.description;
			pastedComponent.guarantee= copiedEquipment.guarantee;
			pastedComponent.manufacturerModelDesignation= copiedEquipment.manufacturerModelDesignation;
			pastedComponent.name= copiedEquipment.name;
			pastedComponent.componentClass= EquipmentClass.find.byId(copiedEquipment.equipmentClass.id);
			pastedComponent.manufactureDate = copiedEquipment.manufactureDate;
			pastedComponent.manufacturerCompany =
					copiedEquipment.manufacturerCompany==null ? null : Companies.find.byId(copiedEquipment.manufacturerCompany.id);
			pastedComponent.manufacturerModelDesignation = copiedEquipment.manufacturerModelDesignation;
			pastedComponent.purchaseDate = copiedEquipment.purchaseDate;
			pastedComponent.save();
			
			//copy equipment blobs to new component
			int fs = copiedEquipment.files.size();
			pastedComponent.files = new ArrayList<Blobs>();
			if(fs!=0) {
				for(Blobs bb : copiedEquipment.files) {
					pastedComponent.files.add(bb);
				}
			}
			pastedComponent.saveManyToManyAssociations("files");
			copiedEquipment.deleteManyToManyAssociations("files");
			
			//Remove equipment repair tools
			copiedEquipment.deleteManyToManyAssociations("specialTools");
			
			//Move equipment data sheet to component
			List<Datasheet> copiedDsList = Datasheet.find.where().
					eq("parentEquipment.id", equipmentId).
					findList();
			if(copiedDsList.size()!=0) {
				for(Datasheet ds : copiedDsList) {
					Datasheet newDs = new Datasheet();
					newDs = (Datasheet) ds._ebean_createCopy();
					newDs.id=null;
					newDs.parentComponent=pastedComponent;
					newDs.parentEquipment=null;
					newDs.save();
					ds.delete();
				}
			}
			
			//delete equipment pm routines
			List<PreventiveMaintenances> copiedPMList = PreventiveMaintenances.find.where().
					eq("parentEquipment.id", equipmentId).
					findList();
			if(copiedPMList.size()!=0) {
				for(PreventiveMaintenances pm : copiedPMList) {
					pm.delete();
				}
			}
		
		//Move History and maintenance to new component
		for(Maintenances me : Maintenances.find.where()
				.eq("maintainedEquipment.id",equipmentId).findList()) {
			me.maintainedEquipment = pastedComponent.subunit.equipment;
			me.maintainedSection = pastedComponent.subunit.equipment.section;
			me.update();
		}
		
		for (History he : History.find.where()
				.eq("parentEquipment.id",equipmentId).findList()) {
			if(he.eventType==EventTypes.MAINTENANCE)
				he.parentEquipment = pastedComponent.subunit.equipment;
			else {
				he.parentEquipment=null;
				he.parentComponent=pastedComponent;
			}
			Ebean.update(he,
					new HashSet<String>(Arrays.asList("parentEquipment","parentComponent")));
		}
		
		if(copiedEquipment.drivenEquipment!=null) {
			Equipments dne = copiedEquipment.drivenEquipment;
			dne.driverEquipment=null;
			Ebean.update(dne,
					new HashSet<String>(Arrays.asList("driverEquipment")));
			copiedEquipment.drivenEquipment = null;
		}
		
		if(copiedEquipment.driverEquipment!=null) {
			Equipments dre = copiedEquipment.driverEquipment;
			dre.drivenEquipment=null;
			Ebean.update(dre,
					new HashSet<String>(Arrays.asList("drivenEquipment")));
			copiedEquipment.driverEquipment = null;
		}
		copiedEquipment.delete();
		Ebean.commitTransaction();
		result=true;
		} catch(Exception e) {
			Ebean.rollbackTransaction();
			Logger.error("copyAsComponent error",e.fillInStackTrace());
			result=false;
		} finally {
			Ebean.endTransaction();
		}
		return result;
	}
	
}